we can perform file handling in java using Java I/O API.
java.io.*;

Stream : 
- it is composed of bytes.It is sequence of data.
- In java, 3 streams are created for us automatically.
1.System.in
2.System.out
3.System.err

OutputStream / InputStream  :
OutputStream : used to write data into file
InputStream : used to read data from file

OutputStream class :
- abstract class
- super class of all the classes representing output stream of byte
Methods :
	1.public void write(byte[])throws IOException :used to write byte
	2.public void flush() throws IOException : flushes the output stream
	3.public void close() throws IOException : close output stream
	
InputStream class :
- abstract class
- super class of all classes representing input stream of byte
Methods :
	1.public abstract int read() : used to read data. it returns -1 at the end of the file
	2.public int available() : returns byte of data if present
	3.public void close() : used to close input stream
	
Types of File :
1.Character Oriented (contains only textual information)
		write : FileWriter
		read : FileReader
		
2.Byte-oriented (contains text as well as image, audio, video etc)
		write : FileOutputStream
		read : FileInputStream
		
Serialization : 
- It is a mechanism of writing the state of an object into the byte stream
- it is mainly used to travel object's state on the network.(known as marshaling)

Serializable interface :
- It is marker interface(has no data members and methods)
- it is used to marked java classes so that object of these classes may get certain capability.
- it is implemented by the classes whose object you want to persist
- String and all wrapper classes implements Serializable interface by default.
- Cloneable and Remote interface are marker interface.

ObjectOutputStream class :
- used to write primitive data types and java objects to an output stream
- only those objects that support serializable can be written to stream.
Methods:
	1.public final void writeObject(Object obj): writes the specified object to the stream
	2.public void flush() : 
	3.public void close() :
	
Deserialization :
- it is reverse process of serialization.
- it is process of reconstructing the object from the serialized state.

ObjectInputStream class :
- it deserializes objects and primitive data written using ObjectOutputStream
Methods :
	1.public final Object readObject() throws IOException,ClassNotFoundException : reads the object from the input stream
	2.public void close()
 





















